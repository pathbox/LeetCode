package LeetCode371

func getSum(a int, b int) int {
	for a != 0 {
		// b = a^b // 两个数sum但没有进位 XOR
		// a = (a&b)<<1 // 两个数sum的进位 AND
		a, b = (a&b)<<1, a^b
	}
	return b
}

// 我们平时计算时是将对应位相加和进位同时计算，其实可以保留下进位，只计算对应位相加，保留进位的位置（值）。接下来，将进位向左移动一位，将上一步的结果与移位后的进位值进行对应位相加，直到没有进位结束。

// 对于二进制数的而言，对应位相加就可以使用异或（xor）操作，计算进位就可以使用与（and）操作，在下一步进行对应位相加前，对进位数使用移位操作（<<）
